(ns loom.test.graph
  (:use [loom.graph] :reload)
  (:use [clojure.test]))

(deftest simple-graph-test
  (let [g1 (graph [1 2] [1 3] [2 3] 4)
        g2 (graph {1 [2 3] 2 [3] 4 []})
        g3 (graph g1)
        g4 (graph g3 (directed-graph [5 6]) [7 8] 9)
        g5 (graph)]
    (testing "Construction, nodes, edges"
      (are [expected got] (= expected got)
        #{1 2 3 4} (set (nodes g1))
        #{[1 2] [2 1] [1 3] [3 1] [2 3] [3 2]} (set (directed-edges g1))
        (set (nodes g2)) (set (nodes g1))
        (set (directed-edges g2)) (set (directed-edges g1))
        (set (nodes g3)) (set (nodes g1))
        (set (nodes g3)) (set (nodes g1))
        #{1 2 3 4 5 6 7 8 9} (set (nodes g4))
        #{[1 2] [2 1] [1 3] [3 1] [2 3]
          [3 2] [5 6] [6 5] [7 8] [8 7]} (set (directed-edges g4))
        #{} (set (nodes g5))
        #{} (set (directed-edges g5))
        true (has-node? g1 4)
        true (has-edge? g1 1 2)
        false (has-node? g1 5)
        false (has-edge? g1 4 1)))
    (testing "Neighbors"
      (are [expected got] (= expected got)
        #{2 3} (set (neighbors g1 1))
        #{1 2} (set (neighbors g1 3))
        #{} (set (neighbors g1 4))
        2 (degree g1 1)
        2 (degree g1 3)
        0 (degree g1 4)))
    (testing "Add & remove"
      (are [expected got] (= expected got)
        #{1 2 3 4 5} (set (nodes (add-nodes g1 5)))
        #{:a :b :c} (set (nodes (add-nodes g5 :a :b :c)))
        #{{:id 1} {:id 2}} (set (nodes (add-nodes g5 {:id 1} {:id 2})))
        #{[1 2] [2 1]} (set (directed-edges (add-edges g5 [1 2])))
        #{1 2} (set (nodes (remove-nodes g1 3 4)))
        #{[1 2] [2 1]} (set (directed-edges (remove-nodes g1 3 4)))
        #{1 2 3 4} (set (nodes (remove-edges g1 [1 2] [2 1] [1 3] [3 1])))
        #{[2 3] [3 2]} (set (directed-edges (remove-edges g1 [1 2] [2 1] [1 3] [3 1])))))))

(deftest simple-digraph-test
  (let [g1 (directed-graph [1 2] [1 3] [2 3] 4)
        g2 (directed-graph {1 [2 3] 2 [3] 4 []})
        g3 (directed-graph g1)
        g4 (directed-graph g3 (graph [5 6]) [7 8] 9)
        g5 (directed-graph)
        g6 (transpose g1)]
    (testing "Construction, nodes, edges"
      (are [expected got] (= expected got)
        #{1 2 3 4} (set (nodes g1))
        #{1 2 3 4} (set (nodes g6))
        #{[1 2] [1 3] [2 3]} (set (directed-edges g1))
        #{[2 1] [3 1] [3 2]} (set (directed-edges g6))
        (set (nodes g2)) (set (nodes g1))
        (set (directed-edges g2)) (set (directed-edges g1))
        (set (nodes g3)) (set (nodes g1))
        (set (nodes g3)) (set (nodes g1))
        #{1 2 3 4 5 6 7 8 9} (set (nodes g4))
        #{[1 2] [1 3] [2 3] [5 6] [6 5] [7 8]} (set (directed-edges g4))
        #{} (set (nodes g5))
        #{} (set (directed-edges g5))
        true (has-node? g1 4)
        true (has-edge? g1 1 2)
        false (has-node? g1 5)
        false (has-edge? g1 2 1)))
    (testing "Neighbors"
      (are [expected got] (= expected got)
        #{2 3} (set (neighbors g1 1))
        #{} (set (neighbors g1 3))
        #{} (set (neighbors g1 4))
        2 (out-degree g1 1)
        0 (out-degree g1 3)
        0 (out-degree g1 4)
        #{1 2} (set (direct-predecessors g1 3))
        #{} (set (direct-predecessors g1 1))
        2 (in-degree g1 3)
        0 (in-degree g1 1)
        #{1 2} (set (neighbors g6 3))
        #{} (set (neighbors g6 1))
        2 (out-degree g6 3)
        0 (out-degree g6 1)))
    (testing "Add & remove"
      (are [expected got] (= expected got)
        #{1 2 3 4 5} (set (nodes (add-nodes g1 5)))
        #{:a :b :c} (set (nodes (add-nodes g5 :a :b :c)))
        #{{:id 1} {:id 2}} (set (nodes (add-nodes g5 {:id 1} {:id 2})))
        #{[1 2]} (set (directed-edges (add-edges g5 [1 2])))
        #{1 2} (set (nodes (remove-nodes g1 3 4)))
        #{[1 2]} (set (directed-edges (remove-nodes g1 3 4)))
        #{1 2 3 4} (set (nodes (remove-edges g1 [1 2] [1 3])))
        #{[2 3]} (set (directed-edges (remove-edges g1 [1 2] [1 3])))))))

(deftest simple-weighted-graph-test
  (let [g1 (graph [1 2 77] [1 3 88] [2 3 99] 4)
        g2 (graph {1 {2 77 3 88} 2 {3 99} 4 []})
        g3 (graph g1)
        g4 (graph g3 (directed-graph [5 6 88]) [7 8] 9)
        g5 (graph)]
    (testing "Construction, nodes, edges"
      (are [expected got] (= expected got)
        #{1 2 3 4} (set (nodes g1))
        #{[1 2] [2 1] [1 3] [3 1] [2 3] [3 2]} (set (directed-edges g1))
        (set (nodes g2)) (set (nodes g1))
        (set (directed-edges g2)) (set (directed-edges g1))
        (set (nodes g3)) (set (nodes g1))
        (set (nodes g3)) (set (nodes g1))
        #{1 2 3 4 5 6 7 8 9} (set (nodes g4))
        #{[1 2] [2 1] [1 3] [3 1] [2 3]
          [3 2] [5 6] [6 5] [7 8] [8 7]} (set (directed-edges g4))
        #{} (set (nodes g5))
        #{} (set (directed-edges g5))
        true (has-node? g1 4)
        true (has-edge? g1 1 2)
        false (has-node? g1 5)
        false (has-edge? g1 4 1)))
    (testing "Neighbors"
      (are [expected got] (= expected got)
        #{2 3} (set (neighbors g1 1))
        #{1 2} (set (neighbors g1 3))
        #{} (set (neighbors g1 4))
        2 (degree g1 1)
        2 (degree g1 3)
        0 (degree g1 4)))
    (testing "Add & remove"
      (are [expected got] (= expected got)
        #{1 2 3 4 5} (set (nodes (add-nodes g1 5)))
        #{:a :b :c} (set (nodes (add-nodes g5 :a :b :c)))
        #{{:id 1} {:id 2}} (set (nodes (add-nodes g5 {:id 1} {:id 2})))
        #{[1 2] [2 1]} (set (directed-edges (add-edges g5 [1 2])))
        #{1 2} (set (nodes (remove-nodes g1 3 4)))
        #{[1 2] [2 1]} (set (directed-edges (remove-nodes g1 3 4)))
        #{1 2 3 4} (set (nodes (remove-edges g1 [1 2] [2 1] [1 3] [3 1])))
        #{[2 3] [3 2]} (set (directed-edges (remove-edges g1 [1 2] [2 1] [1 3] [3 1])))))
    (testing "Weight"
      (are [expected got] (= expected got)
        77 (weight g1 1 2)
        77 (weight g2 1 2)
        77 (weight g3 1 2)
        88 (weight g4 6 5)
        1 (weight g4 7 8)))))

(deftest simple-weighted-digraph-test
  (let [g1 (directed-graph [1 2 77] [1 3 88] [2 3 99] 4)
        g2 (directed-graph {1 {2 77 3 88} 2 {3 99} 4 []})
        g3 (directed-graph g1)
        g4 (directed-graph g3 (graph [5 6 88]) [7 8] 9)
        g5 (directed-graph)
        g6 (transpose g1)]
    (testing "Construction, nodes, edges"
      (are [expected got] (= expected got)
        #{1 2 3 4} (set (nodes g1))
        #{1 2 3 4} (set (nodes g6))
        #{[1 2] [1 3] [2 3]} (set (directed-edges g1))
        #{[2 1] [3 1] [3 2]} (set (directed-edges g6))
        (set (nodes g2)) (set (nodes g1))
        (set (directed-edges g2)) (set (directed-edges g1))
        (set (nodes g3)) (set (nodes g1))
        (set (nodes g3)) (set (nodes g1))
        #{1 2 3 4 5 6 7 8 9} (set (nodes g4))
        #{[1 2] [1 3] [2 3] [5 6] [6 5] [7 8]} (set (directed-edges g4))
        #{} (set (nodes g5))
        #{} (set (directed-edges g5))
        true (has-node? g1 4)
        true (has-edge? g1 1 2)
        false (has-node? g1 5)
        false (has-edge? g1 2 1)))
    (testing "Neighbors"
      (are [expected got] (= expected got)
        #{2 3} (set (neighbors g1 1))
        #{} (set (neighbors g1 3))
        #{} (set (neighbors g1 4))
        2 (out-degree g1 1)
        0 (out-degree g1 3)
        0 (out-degree g1 4)
        #{1 2} (set (incoming g1 3))
        #{} (set (incoming g1 1))
        2 (in-degree g1 3)
        0 (in-degree g1 1)
        #{1 2} (set (neighbors g6 3))
        #{} (set (neighbors g6 1))
        2 (out-degree g6 3)
        0 (out-degree g6 1)))
    (testing "Add & remove"
      (are [expected got] (= expected got)
        #{1 2 3 4 5} (set (nodes (add-nodes g1 5)))
        #{:a :b :c} (set (nodes (add-nodes g5 :a :b :c)))
        #{{:id 1} {:id 2}} (set (nodes (add-nodes g5 {:id 1} {:id 2})))
        #{[1 2]} (set (directed-edges (add-edges g5 [1 2])))
        #{1 2} (set (nodes (remove-nodes g1 3 4)))
        #{[1 2]} (set (directed-edges (remove-nodes g1 3 4)))
        #{1 2 3 4} (set (nodes (remove-edges g1 [1 2] [1 3])))
        #{[2 3]} (set (directed-edges (remove-edges g1 [1 2] [1 3])))))
    (testing "Weight"
      (are [expected got] (= expected got)
        77 (weight g1 1 2)
        77 (weight g2 1 2)
        77 (weight g3 1 2)
        77 (weight g6 2 1)
        88 (weight g4 6 5)
        1 (weight g4 7 8)))))

(comment

(deftest fly-graph-test
  (let [fg1 (fly-graph :nodes [1 2 3]
                       :neighbors #(if (= 3 %) [1] [(inc %)])
                       :weight (constantly 88))
        fg2 (fly-graph :neighbors #(if (= 3 %) [1] [(inc %)])
                       :start 1)]
    (testing "Construction, nodes, edges"
      (are [expected got] (= expected got)
        #{1 2 3} (set (nodes fg1))
        #{1 2 3} (set (nodes fg2))
        #{[1 2] [2 3] [3 1]} (set (edges fg1))
        #{[1 2] [2 3] [3 1]} (set (edges fg2))
        88 (weight fg1 1 2)))
    ;; TODO: finish
    ))

)

(deftest utilities-test
  (testing "Predicates"
    (are [expected got] (= expected got)
      true (every? true? (map graph? [(graph [1 2])
                                      (directed-graph [1 2])
                                      (graph [1 2])
                                      (directed-graph [1 2])
                                      ;(fly-graph :neighbors [1 2])
                                      ;(reify Graph)
                                      ]))
      true (every? true? (map directed? [(directed-graph [1 2])
                                         (directed-graph [1 2])
                                         ;(fly-graph :incoming [1 2])
                                         ;(reify Digraph)
                                         ]))
      true (every? true? (map weighted? [(graph [1 2])
                                         (directed-graph [1 2])
                                         ;(fly-graph :weight (constantly 1))
                                         ;(reify WeightedGraph)
                                         ]))))
  (testing "Adders"
    (let [g (directed-graph [1 2] [2 3] [3 1])
          sg (subgraph g [1 2])
          pg (add-path (directed-graph) 1 2 3 4 5)
          cg (add-cycle (directed-graph) 1 2 3)]
      (are [expected got] (= expected got)
        #{1 2} (set (nodes sg))
        #{[1 2]} (set (directed-edges sg))
        true (graph? sg)
        true (directed? sg)
        true (weighted? sg)
        #{[1 2] [2 3] [3 4] [4 5]} (set (directed-edges pg))
        #{[1 2] [2 3] [3 1]} (set (directed-edges cg))))))

